/*
 * iframeTab
 * Version: 2.3.5
 *
 * Plugin that can simulate browser to open links as tab and iframe in a page.
 *
 * https://github.com/HenriettaSu/iframeTab
 *
 * License: MIT
 *
 * Released on: February 19, 2017
 */
(function () {
    iframeTab = jQuery.prototype = {
        iframeHeight: function(updateHeight) {
            var iframes = document.getElementById('tabBody').children,
                ifm,
                subWeb,
                i,
                g;
            for (i = 0; i < iframes.length; i++) {
                var ifmClass;
                g = iframes[i];
                ifmClass = g.getAttribute('class');
                ifm = ifmClass.match('active') ? g.getElementsByTagName('iframe')[0] : null;
            }
            subWeb = document.frames ? document.frames['iframepage'].document : ifm.contentDocument;
            if (updateHeight) {
                ifm.height = updateHeight;
            } else if (ifm !== null && subWeb !== null) {
                ifm.height = subWeb.body.scrollHeight;
            }
            $(document).trigger('iframetab.reloaded');
        },
        init: function (option) {
            var _tab = this,
                tab = _tab.prototype,
                act = 'active',
                isTop = (top === self),
                isOpen = false,
                isSwitch = false,
                p = isTop ? null : window.parent.document,
                $tabUl = $('#tabHeader ul', p),//标签栏
                $tabBody = $('#tabBody', p),//标签页
                options = $.extend({
                    tabLiClass: '',
                    tabPanClass: '',
                    closesBtnClass: 'fa fa-close',
                    switchBtnDown: 'fa fa-chevron-down',
                    switchBtnUp: 'fa fa-chevron-up',
                    contextmenuClass: 'dropdown open',
                    iframeBox: '<div class="right_col" role="main"></div>',
                    singleLineheight: 92,
                    menuWidth: 230,
                    callback: []
                }, option),
                tabLiClass = options.tabLiClass,
                tabPanClass = options.tabPanClass,
                closesBtnClass = options.closesBtnClass,
                switchBtnDown = options.switchBtnDown,
                switchBtnUp = options.switchBtnUp,
                iframeBox = options.iframeBox,
                singleLineheight = options.singleLineheight,
                menuWidth = options.menuWidth,
                contextmenuClass = options.contextmenuClass,
                callback = options.callback;
            tabList = parent.tabList || {};

            function stellung (event) { // 創建窗口
                if(window.top.location.href.indexOf("web")>-1){
                    console.log("当前为单独页面");
                }else{
                    var $this = $(this),//点击可创建窗口的a标签
                        that = this,
                        link = that.href,//a标签的href属性
                        name = $this.attr("data-name") ? $this.attr("data-name") : that.innerHTML,//a标签的data-name（如果有）
                        parent = $this.attr("data-parent") ? ('data-parent="'+$this.attr("data-parent")+'"') : '',//data-parent存这个锚点属于第几个模块(index.html页面用)
                        me = $this.attr("data-me") ? ('data-me="'+$this.attr("data-me")+'"') : '',//data-me存这个锚点属于当前模块的第几个(index.html页面用)
                        date = new Date().getTime(),//点击a标签的时间
                        mul = $this.attr("data-mul"),//a标签的mul属性
                        reload = $this.attr("data-reload"),//a标签的reload属性
                        $tabLi = $('#tabHeader li', p),//标签栏li
                        $tabPan = $('.tab-panel', p),//标签页list
                        tab = $tabUl.find('li[data-name="' + name + '"]').data('tab'),
                        tempLi = '<li class="active ' + tabLiClass + '" '+ (parent||'') +' '+ (me||'') +' data-tab="' + link + '" data-name="' + name + '" data-num="' + date + '">' + name + '<i class="' + closesBtnClass + '" data-btn="close"></i></li>',
                        $iframe = $('<iframe src="' + link + '" data-iframe="' + link + '" data-num="' + date + '" marginheight="0" marginwidth="0" frameborder="0" scrolling="auto"></iframe>');

                    // 插入新標籤
                    function stellen(cb) {
                        var tabUlWidth = $tabUl.width(),//标签栏宽度
                            $newTabLiLast,
                            $newTabLiFirst,
                            beforeCreatBoolean;
                        beforeCreatBoolean = cb.beforeCreat();
                        if (beforeCreatBoolean === false) {
                            return false;
                        }
                        tabList[link] = true;//判断标签页是否已打开
                        $tabLi.removeClass(act);//取消当前所有标签栏的active class
                        $tabUl.append(tempLi);//插入标签栏
                        //判断是否超过一行的逻辑
                        if (!isSwitch && $tabUl.height() > singleLineheight) {
                            $newTabLiLast = $tabUl.find('li').last();
                            $tabUl.width(tabUlWidth - 30);
                            $tabUl.addClass('hide-tab');
                            $tabUl.after('<i class="' + switchBtnDown + ' fold-switch" data-btn="switch"></i>');
                            isSwitch = true;
                            $('#tabHeader').on('click.iframetab.switch', '[data-btn="switch"]', function () {
                                var _this = $(this);
                                _this.toggleClass(switchBtnDown);
                                _this.toggleClass(switchBtnUp);
                                $tabUl.toggleClass('hide-tab');
                            });
                            $newTabLiLast.remove();
                            $tabUl.find('li').first().before($newTabLiLast);
                        } else if (isSwitch) {
                            $newTabLiFirst = $tabUl.find('li').last();
                            $newTabLiFirst.remove();
                            $tabUl.find('li').first().before($newTabLiFirst);
                        }
                        $tabPan.removeClass(act);//取消当前所有标签页的active class
                        $tabBody.append($iframe);//插入标签页
                        $iframe.wrap('<div class="tab-panel active ' + tabPanClass + '"></div>');
                        $iframe.wrap(iframeBox);
                        cb.onCreat();
                        $iframe.load(function () {
                            cb.afterCreat();
                        });
                    }
                    //首次生成是使用jquery trigger并没有点击鼠标
                    if (event.which === undefined) {
                        event.which = 1;
                    }
                    if (event.which === 1) {
                        var cb = {
                            beforeCreat: function () {
                                if (callback.beforeCreat) {
                                    return callback.beforeCreat();
                                }
                            },
                            onCreat: function () {
                                if (callback.onCreat) {
                                    callback.onCreat();
                                }
                            },
                            afterCreat: function () {
                                if (callback.afterCreat) {
                                    callback.afterCreat();
                                }
                            }
                        }
                        //如果是单标签页且已经打开就刷新
                        if (tabList[link] && typeof mul === 'undefined') {
                            $tabLi.removeClass(act);
                            $tabUl.find('li[data-tab="' + link + '"]').addClass('active');
                            $tabPan.removeClass(act);
                            $tabBody.find('iframe[data-iframe="' + link + '"]').parents('.tab-panel').addClass(act);
                            if (reload) {
                                $tabBody.find('iframe[data-iframe="' + link + '"]').attr('src', link);
                            }
                            //否则插入标签页
                        } else {
                            stellen(cb);
                        }
                    }
                    return false;
                }




            }
            function changeTab (cb) { // 切换标签
				$('#tabHeader').on('click.iframetab', 'li:not(.active)', function () {
                    var $thisLi = $(this),
                         that = this,
                         liLink = $thisLi.attr("data-tab"),
                         date = $thisLi.attr("data-num"),
                         $liTabPan = $('.tab-panel'),
                         $liTabLi = $tabUl.find('li'),
                         $activeIframe = $tabBody.find('iframe[data-iframe="' + liLink + '"][data-num="' + date + '"]'),
                         beforeChangeBoolean;
                        beforeChangeBoolean = cb.beforeChange();
                    if (beforeChangeBoolean === false) {
                        return false
                    }
                    $liTabLi.removeClass(act);
                    $liTabPan.removeClass(act);
                    cb.onChange();
                    if($thisLi.attr("data-parent") != '' && $thisLi.attr("data-parent") != undefined) {
                      var selfLi = $('[data-changeSide='+$thisLi.attr("data-parent")+']');
                      //去除一级菜单高亮
                      $('li.has-sub').removeClass('active');
                      //给自己的父级li添加高亮
                      selfLi.closest('li').addClass('active');
                      //确定二级菜单的高度
                      $('#sidebarLeftInner').height($('#sidebarLeft').innerHeight() - 64);
                      //插入对应的二级菜单
                      $('#sidebarLeftInner').empty().html(window.htmlSAVE[$thisLi.attr("data-parent")]);
                      //二级菜单生成滚动条
                      $('#sidebarLeftInner').slimScroll({
                        height: $('#sidebarLeftInner').height(),
                        position: 'left',
                        color: '#ffffff'
                      });
                      $('#sidebarLeftInner a[data-num]').click(function() {
                        $('#sidebarLeftInner a[data-num]').removeClass('active');
                        $(this).addClass('active');
                      })
                      $('#sidebarLeftInner a[data-num]').removeClass('active');
                      $('#sidebarLeftInner a[data-me='+$thisLi.attr("data-me")+']').addClass('active');
                    }
                    $tabUl.find('li[data-tab="' + liLink + '"][data-num="' + date + '"]').addClass(act);
                    $activeIframe.parents('.tab-panel').addClass(act);
                    cb.afterChange();
                });
            }
            function btnDel (cb) { // 关闭标签
				$('#tabHeader').on('click.iframetab', 'li [data-btn="close"]', function (e) {
                    var $this = $(this),
                        that = this,
                        thatLi = this.parentNode,
                        tab = $this.parent().attr("data-tab"),
                        date = $this.parent().attr("data-num"),
                        $li = $this.parent(),
                        $tabLi = $('#tabHeader').find('li'),
                        $prev = $li.prev(),
                        $next = $li.next(),
                        windowWidth = document.body.clientWidth,
                        countWidth = 0,
                        beforeCloseBoolean;
                    beforeCloseBoolean = cb.beforeClose();
                    if (beforeCloseBoolean === false) {
                        return false
                    }
                    delete tabList[tab];
                    $li.remove();
                    $tabBody.find('iframe[data-iframe="' + tab + '"][data-num="' + date + '"]').parents('.tab-panel').remove();
                    $tabLi.each(function () {
                        var _this = $(this),
                            liWidth = _this.width() > 0 ? _this.width() + 25 : _this.width();
                        countWidth += liWidth;
                    });
                    if (isSwitch && countWidth < windowWidth - menuWidth) {
                        $('#tabHeader').off('click.iframetab.switch').find('[data-btn="switch"]').remove();
                        isSwitch = false;
                        $tabUl.toggleClass('hide-tab');
                        $tabUl.width('auto');
                    }
                    cb.onClose();
                    if (typeof $prev.html() === 'undefined') {
                        $next.click();
                        // 如果在调用关闭激活标签方法时需要刷新关闭后自动跳转的标签页
                        if($next[0] && $($next[0]).attr("data-refresh")) {
                            var rLink = $($prev[0]).attr("data-tab");
                            $tabBody.find('iframe[data-iframe="' + rLink + '"]').attr('src', rLink);
                        }
                    } else {
                        $prev.click();
                        // 如果在调用关闭激活标签方法时需要刷新关闭后自动跳转的标签页
                        if($prev[0] && $($prev[0]).attr("data-refresh")) {
                            var rLink = $($prev[0]).attr("data-tab");
                            $tabBody.find('iframe[data-iframe="' + rLink + '"]').attr('src', rLink);
                        }
                    }
                    e.preventDefault();
                    e.stopPropagation();
                    cb.afterClose();
                });
            }
            function creatContextmenu (e) { // 右鍵菜單
			    var $this = $(this),
                    x = e.clientX,
                    y = e.clientY,
                    windowWidth = window.innerWidth,
                    contextmenu = '<div id="tabContextmenu" class="tab-contextmenu ' + contextmenuClass + '">' +
                        '<ul class="dropdown-menu">' +
                        '<li><a href="javascript: void(0)" data-btn="removeAll">关闭所有标签</a></li>' +
                        '<li><a href="javascript: void(0)" data-btn="removeExceptAct">关闭激活标签外所有标签</a></li>' +
                        '</ul>' +
                        '</div>',
                    contextmenuWidth = 180;
                if (e.which === 3) {
                    $this.on('contextmenu', function (event) {
                        event.preventDefault();
                    });
                    if (isOpen) {
                        $('#tabContextmenu').addClass('open');
                    } else {
                        $('body').after(contextmenu);
                        isOpen = true;
                    }
                    if (windowWidth - x > contextmenuWidth) {
                        $('#tabContextmenu').css('left', x);
                    } else {
                        $('#tabContextmenu').css('right', contextmenuWidth);
                    }
                    $('#tabContextmenu').css('top', y);
                    $(document).on('click.context.remove.pl', '[data-btn="removeAll"]', function removeAll() { // 關閉所有標籤
                        $('#tabHeader').find('li:not(.tab-keep)').remove();
                        $('.tab-panel:not(.tab-keep)').remove();
                        $('#tabHeader').find('li.tab-keep').click();
                        $('#tabHeader').click();
                        if (isSwitch) {
                            $('#tabHeader').off('click.iframetab.switch').find('[data-btn="switch"]').remove();
                            $tabUl.removeClass('hide-tab');
                            $tabUl.width('auto');
                            isSwitch = false;
                        }
                        tabList = {};
                    });
                    $(document).on('click.context.remove.sing', '[data-btn="removeExceptAct"]', function () { // 关闭激活标签外所有标签
                        $('#tabHeader li, .tab-panel').each(function () {
                            var _this = $(this),
                                tab = _this.attr("data-tab");
                            if (_this.is(':not(.tab-keep)') && _this.is(':not(.active)')) {
                                _this.remove();
                                delete tabList[tab];
                            }
                        });
                        $('#tabHeader').find('li.active').click();
                        if (isSwitch) {
                            $('#tabHeader').off('click.iframetab.switch').find('[data-btn="switch"]').remove();
                            $tabUl.removeClass('hide-tab');
                            $tabUl.width('auto');
                            isSwitch = false;
                        }
                    });
                    $('body').on('click.hide.context', function () { // 關閉右鍵菜單
                        $('body').off('click.hide.context');
                        $('#tabContextmenu').removeClass('open');
                        $(document).off('click.context.remove.pl', '[data-btn="removeAll"]').off('click.context.remove.sing', '[data-btn="removeExceptAct"]');
                    });
                    $('.tab-panel.active iframe')[0].contentWindow.$('body').on('click.hide.context', function () {
                        $('.tab-panel.active iframe')[0].contentWindow.$('body').off('click.hide.context');
                        parent.$('#tabContextmenu').removeClass('open');
                        parent.$(document).off('click.context.remove.pl', '[data-btn="removeAll"]').off('click.context.remove.sing', '[data-btn="removeExceptAct"]');
                    });
                }
            }
            function offEvents () { // 解除命名空間為iframetab的事件綁定
                $(document).off('mouseup.iframetab').off('click.iframetab').off('iframetab.reloaded');
                $('#tabHeader').off('mousedown.iframetab').off('click.iframetab');
            }
            function testArry (evt) {
                return Array.isArray(evt) ? 'array' : typeof evt;
            }

            $(document).on('iframetab.reloaded', function () {
                $(window).resize(function () {
                    parent.iframeTab.iframeHeight();
                });
            });
            $(document).on('click.iframetab', 'a[data-num]', stellung);
            if (isTop) {
                var changeCb = {
                    beforeChange: function () {
                        if (callback.beforeChange) {
                            return callback.beforeChange();
                        }
                    },
                    onChange: function () {
                        if (callback.onChange) {
                            callback.onChange();
                        }
                    },
                    afterChange: function () {
                        if (callback.afterChange) {
                            callback.afterChange();
                        }
                    }
                }, closeCb = {
                    beforeClose: function () {
                        if (callback.beforeClose) {
                            return callback.beforeClose();
                        }
                    },
                    onClose: function () {
                        if (callback.onClose) {
                            callback.onClose();
                        }
                    },
                    afterClose: function () {
                        if (callback.afterClose) {
                            callback.afterClose();
                        }
                    }
                }
                changeTab(changeCb);
                btnDel(closeCb);
                $('#tabHeader').on('mousedown.iframetab', creatContextmenu);
            }
            if ($('[data-source]').length) {
				$(document).on('mouseup.iframetab', '[data-source]', function () { // 點擊刷新tab
                    var source = $(this).attr("data-source");
                    $tabBody.find('iframe[src="' + source + '"]').attr('src', source);
                    iframeTab.iframeHeight();
                });
            }
            if ($('[data-btn="refresh"]').length) {
			    $(document).on('click.iframetab', '[data-btn="refresh"]', function (e) { // 刷新當前iframe
                    e.preventDefault();
                    e.stopPropagation();
                    window.location.reload(true);
                });
            }
            tab = {
                on: function () {
                    var len = arguments.length,
                        evt = arguments[0],
                        cbFunc = arguments[1],
                        evts,
                        evtType = testArry(evt),
                        i,
                        g;
                    switch (evtType) {
                        case 'string':
                            evts = evt.split(' ');
                            for (i = 0; i < len; i++) {
                                g = evts[i];
                                callback[g] = cbFunc;
                            }
                            break;
                        case 'object':
                            for (i in evt) {
                                callback[i] = evt[i];
                            }
                            break;
                        default:
                            console.error('Event type is unexceptable.');
                    }
                },
                off: function (evtName) {
                    var evt = evtName,
                        evts,
                        evtType = typeof evt,
                        hasVal = false,
                        isEmpty,
                        len,
                        i,
                        g;
                    switch (evtType) {
                        case 'string':
                            hasVal = (evt !== ' ');
                            if (hasVal) {
                                evts = evt.split(' ');
                                len = evts.length;
                                if (len === 1) {
                                    delete callback[evt];
                                } else {
                                    for (i = 0; i < len; i++) {
                                        g = evts[i];
                                        delete callback[g];
                                    }
                                }
                            }
                            break;
                        case 'undefined':
                            for (i in callback) {
                                delete callback[i];
                            }
                            break;
                    }
                },
                /**
                 * 关闭激活标签
                 * @param {是否在刷新下一个自动激活的标签页}
                 * @return {null}
                 */
                closeActIframe: function (isRefresh,comeUrl) {
                    if(window.top.location.href == window.location.href) {//判断是否为单独页面
                        history.go(-1);
                    }else{
                        var actPrev='',actNext='';
                        var actLi = parent.$('#tabHeader').find('li.active');
                        if (!isRefresh) {
                            if(comeUrl){
                                actPrev=actLi.siblings('li[data-tab="'+comeUrl+'"]');
                                $tabBody.find('iframe[data-iframe="' + comeUrl + '"]').attr('src', comeUrl);
                            }else{
                                actPrev = actLi.prev(),
                                    actNext = actLi.next();
                            }
                            if (typeof actPrev.html() === 'undefined') {
                                $(actNext[0]).attr("data-refresh","1");
                            } else {
                                $(actPrev[0]).attr("data-refresh","1");
                            }
                        }
                        actLi.find('[data-btn="close"]').click();
                        actPrev.trigger('click');
                    }

                },
                /**
                 * 本页面跳转
                 * @param {要跳转的链接，标签页要显示的名称}
                 * @return {null}
                 */
                refreshTab: function (Link, Name) {
                    if(window.top.location.href == window.location.href) {//判断是否为单独页面
                        history.go(-1);
                    }else{
                        var Rdate = new Date().getTime();
                        var curLi = parent.$('#tabHeader').find('li.active');
                        var curIf = parent.$('#tabBody').find('.tab-panel.active').children();
                        //避免和原有的页面冲突
                        Link = window.location.protocol + "//" + window.location.host + (localStorage.getItem('Subdomain')||"") + Link + '#' + Rdate;
                        tabList[$(curLi[0]).attr("data-tab")] = false;
                        tabList[(Link)] = true;
                        $(curLi[0]).attr("data-tab", Link);
                        $(curLi[0]).attr("data-num",Rdate);
                        if (Name) {
                            curLi[0].innerHTML = Name + ' <i class="fa fa-close" data-btn="close"></i>';
                        }
                        $(curIf[0]).attr("data-iframe", Link);
                        $(curIf[0]).attr("data-num",Rdate);
                        curIf.attr('src', Link);
                    }

                },
                destroy: function () {
                    var i;
                    offEvents();
                    for (i in tab) {
                        if (i !== 'dispose') {
                            delete tab[i];
                        }
                    }
                },
                dispose: function (refName) {
                    offEvents();
                    eval(refName + ' = null;');
                    eval('delete ' + refName + ';');
                }
            }
            return tab;
        }
    }
}());
